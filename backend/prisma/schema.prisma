// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id_adm     Int      @id @default(autoincrement())
  nome       String   @db.VarChar(100) //limita o nome a 100 caracteres
  email      String   @unique @db.VarChar(255)
  senha      String   @db.VarChar(60)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("admins")
}

model Cliente {
  id_cliente Int      @id @default(autoincrement())
  nome       String   @db.VarChar(100)
  cpf        String   @db.VarChar(14)
  endereco   String
  celular    String   @db.VarChar(20)
  email      String   @unique @db.VarChar(255)
  senha      String   @db.VarChar(60)
  ativo      Boolean  @default(true) // cadastro começa ativo por padrão
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //um cliente pode ter vários veiculos
  veiculos Veiculo[]

  @@map("clientes")
}

model Veiculo {
  id_veiculo    Int      @id @default(autoincrement())
  placa         String   @db.VarChar(7)
  marca         String   @db.VarChar(50)
  modelo        String   @db.VarChar(50)
  ano           Int
  cor           String   @db.VarChar(20)
  quilometragem Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relacionamento com a tabela Cliente
  id_cliente Int
  Cliente    Cliente @relation(fields: [id_cliente], references: [id_cliente])

  //um veiculo pode ter varios checklists
  checklists Checklist[]

  @@map("veiculos")
}

model Checklist {
  id_checklist Int      @id @default(autoincrement())
  id_veiculo   Int
  id_status    Int
  descricao    String   @db.VarChar(200)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  //relacionamentos 
  Veiculo Veiculo @relation(fields: [id_veiculo], references: [id_veiculo])
  Status  Status  @relation(fields: [id_status], references: [id_status])

  //um checklist tem varios:
  itens_checklist Item_checklist[]
  servicos        Servico[]
  orcamentos      Orcamento?

  @@map("checklists")
}

model Orcamento {
  id_orcamento Int      @id @default(autoincrement())
  id_checklist Int      @unique
  valor_total  Decimal  @db.Decimal(10, 2)
  aprovado     Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  //relacionamento com a tabela checklist
  checklist Checklist @relation(fields: [id_checklist], references: [id_checklist])

  @@map("orcamentos")
}

model Item_checklist {
  id_item_checklist Int @id @default(autoincrement())
  id_checklist Int      
  id_item      Int
  autorizado   Boolean  @default(false)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  //relacionamentos 
  checklists Checklist @relation(fields: [id_checklist], references: [id_checklist])
  item       Item      @relation(fields: [id_item], references: [id_item])
}

model Item {
  id_item        Int      @id @default(autoincrement())
  nome_item      String   @db.VarChar(100)
  id_status_item Int
  foto_url       String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  //relacionamento 
  status_item Status_item @relation(fields: [id_status_item], references: [id_status_item])

  //um item pode ter varios produtos 
  produtos        Produto[]
  itens_checklist Item_checklist[]

  @@map("itens")
}

model Produto {
  id_produto   Int      @id @default(autoincrement())
  id_item      Int
  nome_produto String   @db.VarChar(100)
  quantidade   Int
  valor_uni    Decimal  @default(0) @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  //relacionamento
  item Item @relation(fields: [id_item], references: [id_item])

  @@map("produtos")
}

model Status_item {
  id_status_item Int      @id @default(autoincrement())
  descricao      String   @db.VarChar(15)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  //um status pode ter varios items
  Item Item[]

  @@map("status_itens")
}

model Servico {
  id_servico      Int      @id @default(autoincrement())
  id_checklist    Int
  id_mecanico     Int
  data_realizacao DateTime
  id_status       Int
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  //relacionamneto 
  checklist Checklist @relation(fields: [id_checklist], references: [id_checklist])
  mecanico  Mecanico  @relation(fields: [id_mecanico], references: [id_mecanico])
  status    Status    @relation(fields: [id_status], references: [id_status])

  @@map("servicos")
}

model Status {
  id_status  Int      @id @default(autoincrement())
  descricao  String   @db.VarChar(100)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  //um status contem varios checklists e serviços
  checklist Checklist[]
  servico   Servico[]

  @@map("status")
}

model Mecanico {
  id_mecanico Int      @id @default(autoincrement())
  nome        String   @db.VarChar(100)
  email       String   @unique @db.VarChar(255)
  celular     String   @db.VarChar(20)
  senha       String   @db.VarChar(60)
  ativo       Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  //um mecanico pode ter varios servicos
  servico Servico[]

  @@map("mecanicos")
}
